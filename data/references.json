{
	"name": "dotnet-bookmarks",
	"about": "C# and .NET bookmarks, focused on MVC and DDD",
	"references": [
		{
			"id": 0,
			"name": "🔥",
			"about": "Hottest Resources Out There",
			"links": [
				{
					"name": "dotnetperls.com",
					"url": "https://www.dotnetperls.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "c-sharpcorner.com",
					"url": "https://www.c-sharpcorner.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "tutorialsteacher.com",
					"url": "https://www.tutorialsteacher.com/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 1,
			"name": "Bootstrap",
			"about": "Free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains HTML, CSS and (optionally) JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Official Docs (5.1)",
					"url": "https://getbootstrap.com/docs/5.1/getting-started/introduction/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Dark Theme using JS",
					"url": "https://blog.shhdharmen.me/toggle-light-and-dark-themes-in-bootstrap",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Dark Theme using CSS",
					"url": "https://vinorodrigues.github.io/bootstrap-dark-5/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "StartBootstrap",
					"url": "https://startbootstrap.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "CoreUI Admin",
					"url": "https://github.com/coreui/coreui-free-bootstrap-admin-template",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "DatePicker",
					"url": "https://bootstrap-datepicker.readthedocs.io/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Material Design vs Bootstrap: Which One is Better?",
					"url": "https://azmind.com/material-design-vs-bootstrap/#difference",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "MDB Bootstrap - Material Design",
					"url": "https://mdbootstrap.com/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 2,
			"name": "Async/Await",
			"about": "In computer programming, the async/await pattern is a syntactic feature of many programming languages that allows an asynchronous, non-blocking function to be structured in a way similar to an ordinary synchronous function.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Async/await",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Why",
					"url": "https://stackoverflow.com/a/32343477/7389293",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "How and When",
					"url": "https://stackoverflow.com/questions/14455293/how-and-when-to-use-async-and-await",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Getting Started",
					"url": "https://www.pluralsight.com/guides/csharp-async-await-keywords-getting-started",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Control Flow",
					"url": "https://www.pluralsight.com/guides/understand-control-flow-async-await",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 3,
			"name": "SSMS and MSSQL Sever",
			"about": "SQL Server Management Studio (SSMS) is a software application used for configuring, managing, and administering all components within Microsoft SQL Server (which is, a relational database management system, or database server).",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/SQL_Server_Management_Studio",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Local Server Set Up",
					"url": "https://blogs.triggerdb.com/2021/06/02/instalar-y-configurar-sql-2019-developer-paso-a-paso/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Import/Export DB",
					"url": "https://stackoverflow.com/a/66770043/7389293",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Multiple methods for scheduling a SQL Server backup automatically",
					"url": "https://www.sqlshack.com/multiple-methods-for-scheduling-a-sql-server-backup-automatically/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 4,
			"name": "CSS",
			"about": "Cascading Style Sheets (CSS) is a style sheet language used for describing the presentation (looks) of a document written in a markup language such as HTML or XML (including XML dialects such as SVG, MathML or XHTML).",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/CSS",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Flexbox Guide",
					"url": "https://css-tricks.com/snippets/css/a-guide-to-flexbox/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Grid Guide",
					"url": "https://css-tricks.com/snippets/css/complete-guide-grid/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "CSS Topics Guides",
					"url": "https://css-tricks.com/guides/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "CSS Tooltips Implementation",
					"url": "https://www.florin-pop.com/blog/2019/05/pure-css-tooltip/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 5,
			"name": "TIME (General)",
			"about": "General use. Including and not limited to: C#, SQL, JS, etc. In computer science and computer programming, system time represents a computer system's notion of the passage of time. In this sense, time also includes the passing of days on the calendar. ",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/System_time",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "DateTime to \"YYYYMMDDHHMMSS\" format",
					"url": "https://stackoverflow.com/a/24728080/7389293",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "UNIX Time 🔥",
					"url": "https://currentmillis.com/standard/specification/client-centric-time/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "UNIX_TIMESTAMP in SQL Server",
					"url": "https://stackoverflow.com/questions/8837225/unix-timestamp-in-sql-server",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "How to get correct UNIX_TIMESTAMP in C#",
					"url": "https://stackoverflow.com/questions/21219797/how-to-get-correct-timestamp-in-c-sharp",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "timeSpan.ToString()",
					"url": "https://stackoverflow.com/questions/11077711/timespan-tostring-format",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "dotnetperls.com",
					"url": "https://www.dotnetperls.com/timespan",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "How to handle and create new DateTime on controller/model/view",
					"url": "https://stackoverflow.com/a/31062594/7389293",
					"description": "For DateTime values on MVC. An important database features is the ability to have computed properties. If you're mapping your code first classes to tables that contain computed properties, you don't want Entity Framework to try to update those columns. But you do want EF to return those values from the database after you've inserted or updated data. You can use the DatabaseGenerated annotation to flag those properties in your class along with the Computed enum. Other enums are None and Identity.",
					"tags": [
						"razor",
						"datetime",
						"computed properties",
						"getter",
						"setter"
					]
				}
			]
		},
		{
			"id": 6,
			"name": "nTier Architecture",
			"about": "N-tier application architecture provides a model by which developers can create flexible and reusable applications. By segregating an application into tiers, developers acquire the option of modifying or adding a specific tier, instead of reworking the entire application. A three-tier architecture is typically composed of a presentation tier, a logic tier, and a data tier. While the concepts of layer and tier are often used interchangeably, one fairly common point of view is that there is indeed a difference. This view holds that a layer is a logical structuring mechanism for the conceptual elements that make up the software solution, while a tier is a physical structuring mechanism for the hardware elements that make up the system infrastructure.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Multitier_architecture",
					"description": "Multitier architecture (often referred to as n-tier architecture) is a client–server architecture in which presentation, application processing and data management functions are physically separated. The most widespread use of multitier architecture is the three-tier architecture. ",
					"tags": [
						"ntier",
						"layer",
						"architecture"
					]
				},
				{
					"name": "N-tier architecture style (MS)",
					"url": "https://docs.microsoft.com/en-us/azure/architecture/guide/architecture-styles/n-tier",
					"description": "An N-tier architecture divides an application into logical layers and physical tiers. Logical diagram of an N-tier architecture style. Layers are a way to separate responsibilities and manage dependencies. Each layer has a specific responsibility. A higher layer can use services in a lower layer, but not the other way around.",
					"tags": [
						"ntier",
						"architecture",
						"microsoft"
					]
				},
				{
					"name": "Layered Project Case",
					"url": "https://stackoverflow.com/questions/71714676/where-do-i-place-the-entity-framework-queries-in-layered-architecture",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "AWS Serverless Multi-Tier Architectures with Amazon API Gateway and AWS Lambda (AWS)",
					"url": "https://docs.aws.amazon.com/whitepapers/latest/serverless-multi-tier-architectures-api-gateway-lambda/introduction.html",
					"description": "",
					"tags": [
						"ntier",
						"architecture",
						"aws"
					]
				}
			]
		},
		{
			"id": 7,
			"name": "jQuery",
			"about": "jQuery is a JavaScript library designed to simplify HTML DOM tree traversal and manipulation, as well as event handling, CSS animation, and Ajax.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/JQuery",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Official Docs",
					"url": "https://learn.jquery.com/code-organization/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "jQuery Cheatsheet",
					"url": "https://www.codecademy.com/learn/learn-jquery/modules/learn-jquery-introduction/cheatsheet",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "jQueryUI",
					"url": "https://jqueryui.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Select2",
					"url": "https://select2.org/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "jquery-steps",
					"url": "http://www.jquery-steps.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "DataTables (Examples)",
					"url": "https://datatables.net/examples/index",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "DataTables at ASP.NET (Back-end)",
					"url": "https://gist.github.com/ChinhP/9b4dc1df1b12637b99a420aa268ae32b",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "jQueryValidation",
					"url": "https://jqueryvalidation.org/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 8,
			"name": "Design Patterns",
			"about": "It is a general, reusable solution to a commonly occurring problem within a given context in software design.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Software_design_pattern",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Source Making",
					"url": "https://sourcemaking.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Refactoring Guru",
					"url": "https://refactoring.guru/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "C# Design Patterns",
					"url": "https://scottlilly.com/c-design-patterns/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "How to Learn Software Design and Architecture | The Full-stack Software Design & Architecture Map",
					"url": "https://khalilstemmler.com/articles/software-design-architecture/full-stack-software-design/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 9,
			"name": "Vue.js",
			"about": "Open-source model–view–viewmodel front-end JavaScript framework for building user interfaces and single-page applications.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Vue.js",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Official Docs",
					"url": "https://vuejs.org/guide/introduction.html",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 10,
			"name": "ReactJS",
			"about": "Free and open-source front-end JavaScript library for building user interfaces based on UI components. It can be used as a base in the development of single-page, mobile, or server-rendered applications with frameworks like Next.js. However, React is only concerned with state management and rendering that state to the DOM, so creating React applications usually requires the use of additional libraries for routing, as well as certain client-side functionality.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/React_(JavaScript_library)",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "React in 100 Seconds",
					"url": "https://youtu.be/Tn6-PIqc4UM",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Official Docs",
					"url": "https://reactjs.org/docs/getting-started.html",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 11,
			"name": "Angular",
			"about": "TypeScript-based free and open-source web application framework. Led by the Angular Team at Google and by a community of individuals and corporations. Angular is a complete rewrite from the same team that built AngularJS.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Angular_(web_framework)",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Official Docs",
					"url": "https://angular.io/docs",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Sample App (at GitHub pages",
					"url": "https://www.syncfusion.com/blogs/post/easy-steps-to-host-an-angular-app-in-github-pages.aspx#creating-an-angular-app",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "5 Things to Know About Angular Development With C#",
					"url": "https://programmers.io/5-things-to-know-about-angular-development-with-c/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 12,
			"name": "JavaScript",
			"about": "High-level, often just-in-time compiled language that conforms to the ECMAScript standard. It has dynamic typing, prototype-based object-orientation, and first-class functions. It is multi-paradigm, supporting event-driven, functional, and imperative programming styles. It has application programming interfaces (APIs) for working with text, dates, regular expressions, standard data structures, and the Document Object Model (DOM).\nThe ECMAScript standard does not include any input/output (I/O), such as networking, storage, or graphics facilities. In practice, the web browser or other runtime system provides JavaScript APIs for I/O. ",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/JavaScript",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Comparison of JavaScript-based web frameworks (Wiki)",
					"url": "https://en.wikipedia.org/wiki/Comparison_of_JavaScript-based_web_frameworks",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Style guide",
					"url": "https://google.github.io/styleguide/jsguide.html",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 13,
			"name": "RegEx",
			"about": "A regular expression (shortened as regex or regexp) is a sequence of characters that specifies a search pattern in text. Usually such patterns are used by string-searching algorithms for \"find\" or \"find and replace\" operations on strings, or for input validation.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Regular_expression",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "regexr.com",
					"url": "https://regexr.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "regex101.com",
					"url": "https://regex101.com/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 14,
			"name": "T-SQL Server",
			"about": "Transact-SQL (T-SQL) is Microsoft's and Sybase's proprietary extension to the SQL (Structured Query Language) used to interact with relational databases. T-SQL expands on the SQL standard to include procedural programming, local variables, various support functions for string processing, date processing, mathematics, etc. and changes to the DELETE and UPDATE statements.",
			"links": [
				{
					"name": "Data Types (numerics, strings, time)",
					"url": "https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql?view=sql-server-ver16",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "sqlservertutorial.net",
					"url": "https://www.sqlservertutorial.net/",
					"description": "The sqlservertutorial.net website designed for Software Developers, Database Administrators, Data Engineers, Data Scientists, and Solution Architects who want to get started with SQL Server quickly and efficiently.",
					"tags": [
						"sql server",
						"tutorial",
						"❤️"
					]
				},
				{
					"name": "W3 Schools",
					"url": "https://www.w3schools.com/sql/default.asp",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 15,
			"name": "SQL Language",
			"about": "SQL (Structured Query Language) is a domain-specific language used in programming and designed for managing data held in a relational database management system (RDBMS), or for stream processing in a relational data stream management system (RDSMS). It is particularly useful in handling structured data, i.e. data incorporating relations among entities and variables. ",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/SQL",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "(General) Style",
					"url": "https://www.sqlstyle.guide/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "char Vs nchar",
					"url": "https://stackoverflow.com/a/176523/7389293",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Data Types",
					"url": "https://www.w3schools.com/sql/sql_datatypes.asp",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "ENUM",
					"url": "https://www.postgresql.org/docs/current/datatype-enum.html",
					"description": "Enumerated (enum) types are data types that comprise a static, ordered set of values. They are equivalent to the enum types supported in a number of programming languages. An example of an enum type might be the days of the week, or a set of status values for a piece of data.",
					"tags": [
						"enum",
						"postgresql",
						"datatype"
					]
				}
			]
		},
		{
			"id": 16,
			"name": "Razor Pages",
			"about": "Razor is an ASP.NET programming syntax used to create dynamic web pages with the C# or VB.NET programming languages.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/ASP.NET_Razor",
					"description": "Razor is an ASP.NET programming syntax used to create dynamic web pages with the C# or VB.NET programming languages. Razor was in development in June 2010 and was released for Microsoft Visual Studio 2010 in January 2011. Razor is a simple-syntax view engine and was released as part of MVC 3 and the WebMatrix tool set. Razor became a component of AspNetWebStack and then became a part of ASP.NET Core.",
					"tags": [
						"wikipedia",
						"razor"
					]
				},
				{
					"name": "HTML Helpers",
					"url": "https://www.completecsharptutorial.com/asp-net-mvc5/beginners-course-of-html-helper-in-asp-net-mvc.php",
					"description": "",
					"tags": [
						"razor",
						"helpers"
					]
				},
				{
					"name": "Custom Helper Minimal Example (SO)",
					"url": "https://stackoverflow.com/a/50947610/7389293",
					"description": "",
					"tags": [
						"helper",
						"stackoverflow"
					]
				},
				{
					"name": "Learn Razor Pages - Forms",
					"url": "https://www.learnrazorpages.com/razor-pages/forms",
					"description": "",
					"tags": [
						"razor",
						"forms"
					]
				}
			]
		},
		{
			"id": 17,
			"name": ".NET Tutorials",
			"about": "Different tutorial sites focused on .NET technologies, general view of them.",
			"links": [
				{
					"name": "Understanding .NET (EDteam, SPA)",
					"url": "https://youtu.be/fuTDzzarQGg",
					"description": ".NET es la plataforma estrella de Microsoft, sobre la cuál se puede desarrollar de todo (web, móvil, videojuegos, inteligencia artificial, escritorio, cloud, entre otros). Sin embargo, términos como .NET Framework, .NET Core, .NET 5, .NET Standard, ASP.NET, ASP.NET Core, VisualBasic.NET, etc, pueden darte dolor de cabeza y confundirte.",
					"tags": [
						"youtube",
						"edteam"
					]
				},
				{
					"name": "MS Technical Documentation",
					"url": "https://docs.microsoft.com/en-us/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "MS .NET Video Tutorials",
					"url": "https://dotnet.microsoft.com/en-us/learn/videos",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "MS ASP.NET Core Docs                                  ",
					"url": "https://docs.microsoft.com/en-us/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-6.0",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "HTML Helper",
					"url": "https://www.completecsharptutorial.com/asp-net-mvc5/beginners-course-of-html-helper-in-asp-net-mvc.php",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Rip Tutorial",
					"url": "https://riptutorial.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "DotNet Tutorials",
					"url": "https://dotnettutorials.net/course/csharp-dot-net-tutorials/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "TutorialsTeacher",
					"url": "https://www.tutorialsteacher.com/csharp",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "DotNet Academy",
					"url": "https://dotnetcademy.net/Search",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Pragim Tech",
					"url": "https://www.pragimtech.com/course-category/free-online-courses/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Dot Net Tutorials",
					"url": "https://dotnettutorials.net/course/asp-dot-net-mvc-tutorials/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 18,
			"name": "C# Basics",
			"about": "C# is a general-purpose, multi-paradigm programming language. C# encompasses static typing, strong typing, lexically scoped, imperative, declarative, functional, generic, object-oriented (class-based), and component-oriented programming disciplines. The C# programming language was designed by Anders Hejlsberg from Microsoft in 2000 and was later approved as an international standard by Ecma (ECMA-334) in 2002 and ISO/IEC (ISO/IEC 23270) in 2003.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/C_Sharp_(programming_language)",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "C# Style Guide (by Google)",
					"url": "https://google.github.io/styleguide/csharp-style.html",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "C# Style Rules (by MS)",
					"url": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Hidden Features of C# (SO)",
					"url": "https://stackoverflow.com/questions/9033/hidden-features-of-c",
					"description": "We, C# developers, all know the basics of C#. I mean declarations, conditionals, loops, operators, etc. Some of us even mastered the stuff like Generics, anonymous types, lambdas, LINQ, etc. But what are the most hidden features or tricks of C# that even C# fans, addicts, experts barely know?",
					"tags": [
						"stackoverflow",
						"interesting"
					]
				},
				{
					"name": "C# Built In Types",
					"url": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/built-in-types",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Constraints on type parameters",
					"url": "https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/constraints-on-type-parameters",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Interfaces",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 19,
			"name": "Online Books",
			"about": "One book or library per link. At ResearchGate you can find highly developed ideas for projects (graduate papers).",
			"links": [
				{
					"name": "ResearchGate (papers, ideas)",
					"url": "https://www.researchgate.net/search?q=bug%20tracker",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "CSharp In Depth",
					"url": "https://csharpindepth.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "The Little ASP.NET Core Book (ENG)",
					"url": "https://recaffeinate.co/book/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Amazon Whitepapers (AWS)",
					"url": "https://aws.amazon.com/whitepapers/",
					"description": "Expand your knowledge of the cloud with AWS technical content authored by AWS and the AWS community, including technical whitepapers, technical guides, reference material, and reference architecture diagrams.",
					"tags": [
						"reading",
						"online",
						"book"
					]
				}
			]
		},
		{
			"id": 20,
			"name": "Ebooks",
			"about": "Links to different sites with free ebooks resources.",
			"links": [
				{
					"name": ".NET Architecture Guides (Official)",
					"url": "https://dotnet.microsoft.com/en-us/learn/dotnet/architecture-guides",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Rip Tutorial",
					"url": "https://riptutorial.com/ebook",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "FreeComputerBooks.com - Links to Free Computer, Mathematics, Technical Books all over the World",
					"url": "https://freecomputerbooks.com/microsoftDotNetBooks.html",
					"description": "This site is a directory of Hyperlinks to free ebooks, tutorials, and lecture notes, etc, all over the world. It is basically a free service to the communities with the focus on Information Technologies, Computer Science, Mathematics, etc. This site neither supports copyright infringement, nor links to web sites that trade copyrighted material. If you find any questionable links on this web site, please contact the webmaster (see the contact info at the bottom). ",
					"tags": [
						"ebooks"
					]
				}
			]
		},
		{
			"id": 21,
			"name": "MVC Best Practices",
			"about": "Best practices for MVC development on .NET",
			"links": [
				{
					"name": "Helper Methods",
					"url": "https://stackoverflow.com/questions/8233286/mvc3-helper-method-to-be-used-by-several-controllers",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 22,
			"name": "MVC - Model on .NET",
			"about": "A Model, in the context of an ASP.NET Model View Controller (MVC), is the representation of the data being posted to the Controller, the data being worked on in a View or the representation of the domain specific entities operating in the business tier. The Model contains core application information. It includes data, validation rules, data access, and aggregation logic.",
			"links": [
				{
					"name": "ViewModels More Functional",
					"url": "https://www.danylkoweb.com/Blog/aspnet-mvc-viewmodel-make-your-viewmodels-more-functional-PY",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Model Validation",
					"url": "https://www.c-sharpcorner.com/article/model-validation-in-mvc-5/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 23,
			"name": "MVC - View on .NET",
			"about": "A View, in the context of a Model View Controller (MVC) architecture, is a software class that contains a template and data form and produces a response for the browser. It receives data from the Controller of the MVC and packages it and presents it to the browser for display. The View is not very autonomous -it is like a black box where some data is thrown at it and it gives a display to the user in a browser friendly manner. It collects the input data from data sources, finds the template upon invocation, and combines them into HTML output at runtime.",
			"links": [
				{
					"name": "MVC Dropdowns",
					"url": "https://www.danylkoweb.com/Blog/the-ultimate-guide-to-aspnet-mvc-dropdowns-JO",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Best Way to Bind Partial View",
					"url": "https://www.ifourtechnolab.com/blog/best-way-to-bind-partial-view-for-improving-performance-in-asp-net-mvc",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 24,
			"name": "MVC - Controller on .NET",
			"about": "A controller is a program component that serves as a mediator between a user and application and handles business-related tasks triggered in ASP.NET pages. A controller is used for scripting exposed and middle-tier endpoints for expected user actions and results.",
			"links": [
				{
					"name": "ViewModels More Functional",
					"url": "https://www.danylkoweb.com/Blog/aspnet-mvc-viewmodel-make-your-viewmodels-more-functional-PY",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 25,
			"name": "Repository Pattern & Unit of Work",
			"about": "The repository and unit of work patterns are intended to create an abstraction layer between the data access layer and the business logic layer of an application. Implementing these patterns can help insulate your application from changes in the data store and can facilitate automated unit testing or test-driven development (TDD).",
			"links": [
				{
					"name": "Why? (SO)",
					"url": "https://stackoverflow.com/questions/8749153/why-use-repository-pattern-or-please-explain-it-to-me",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "But why?? (SO)",
					"url": "https://stackoverflow.com/questions/11985736/repository-pattern-step-by-step-explanation",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "CRUD using the Repository Pattern in MVC",
					"url": "https://www.c-sharpcorner.com/UploadFile/3d39b4/crud-using-the-repository-pattern-in-mvc/",
					"description": "This article introduces the repository pattern in an MVC application. We are developing an application for a Book entity on which we can perform Create, Read, Update and Delete operations. To keep the article simple and make it easy to understand the repository pattern, we use a single book entity in the application.",
					"tags": [
						"crud",
						"repository pattern",
						"tutorial"
					]
				},
				{
					"name": "Implementation #1 (SO)",
					"url": "https://stackoverflow.com/questions/10925257/best-repository-pattern-for-asp-net-mvc/10925510#10925510",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Implementation #2 (pragimtech.com)",
					"url": "https://www.pragimtech.com/blog/blazor/rest-api-repository-pattern/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Implementation #3 (remondo.net)",
					"url": "./docs/001.pdf",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Why: Interfaces in RP, with good implementation example",
					"url": "https://stackoverflow.com/questions/10616131/repository-pattern-why-exactly-do-we-need-interfaces",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Why: RP and DDD",
					"url": "https://stackoverflow.com/questions/27631490/what-is-the-use-of-repository-and-why-do-mvc-developers-create-repository",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "DbContext (entityframeworktutorial.net)",
					"url": "https://www.entityframeworktutorial.net/efcore/entity-framework-core-dbcontext.aspx",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Models (POCO), Entity Framework and Data Patterns",
					"url": "https://www.codeproject.com/Articles/615499/Models-POCO-Entity-Framework-and-Data-Patterns",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Content List for RP interface (GS)",
					"url": "https://docs.google.com/spreadsheets/d/18gYhR05ykkRqwye3n808POnTfXT_8MVjz-a5rtldZrg/edit?usp=sharing",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "⭐ Repository and Unit of Work Patterns in an ASP.NET MVC (MS)",
					"url": "https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Martin Fowler on Repository Pattern",
					"url": "https://martinfowler.com/eaaCatalog/repository.html",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 26,
			"name": "Test-Driven Development",
			"about": "Test-Driven Development (TDD) is a software development process relying on software requirements being converted to test cases before software is fully developed, and tracking all software development by repeatedly testing the software against all test cases. This is as opposed to software being developed first and test cases created later.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Test-driven_development",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 27,
			"name": "Scrum",
			"about": "Scrum, or SCRUM, is a framework for project management, with an initial emphasis on software development, although it has been used in other fields including research, sales, marketing and advanced technologies. It is designed for teams of ten or fewer members, who break their work into goals that can be completed within time-boxed iterations, called sprints, no longer than one month and most commonly two weeks. The scrum team assesses progress in time-boxed daily meetings of 15 minutes or fewer, called daily scrums (a form of stand-up meeting). At the end of the sprint, the team holds two further meetings: the sprint review which demonstrates the work done to stakeholders to elicit feedback, and sprint retrospective which enables the team to reflect and improve.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Scrum_(software_development)",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Scrum Guide (Official)",
					"url": "https://scrumguides.org/scrum-guide.html",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Quick Overview",
					"url": "https://www.professionaldevelopment.ie/who-uses-scrum",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "What's Backlog? (SPA)",
					"url": "https://muyagile.com/que-es-el-backlog/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 28,
			"name": "Agile",
			"about": "In software development, Agile practices include requirements discovery and solutions improvement through the collaborative effort of self-organizing and cross-functional teams with their customer(s)/end user(s), adaptive planning, evolutionary development, early delivery, continual improvement, and flexible responses to changes in requirements, capacity, and understanding of the problems to be solved.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Agile_software_development",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Agile Manifesto",
					"url": "http://agilemanifesto.org/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Agile Alliance",
					"url": "https://www.agilealliance.org/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 29,
			"name": "SOLID",
			"about": "Mnemonic acronym for five design principles intended to make object-oriented designs more understandable, flexible, and maintainable. Those principles are:\n• SRP - Single Responsibility\n• OCP - Open-Closed\n• LSP - Liskov Substitution\n• ISP - Interface Segregation\n• DIP - Dependency Inversion",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/SOLID",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Example: remondo.net",
					"url": "http://web.archive.org/web/20150411131853/http://www.remondo.net/category/solid-series/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 30,
			"name": "MVC (General)",
			"about": "Model View Controller (MVC) is a design pattern for computer software. It can be considered an approach to distinguish between the data model, processing control and the user interface. It neatly separates the graphical interface displayed to the user from the code that manages the user actions. The objective is to provide a framework which enforces better and more accurate design.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Life Cycle",
					"url": "https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/lifecycle-of-an-aspnet-mvc-5-application",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Basic Architecture (SO)",
					"url": "https://stackoverflow.com/questions/9732747/what-type-of-architecture-is-this-called/9933371#9933371",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "ASP.NET MVC: Make Your Application an Onion! (danylkoweb.com)",
					"url": "https://www.danylkoweb.com/Blog/aspnet-mvc-make-your-application-an-onion-QE",
					"description": "\"When building your application from scratch, how do you arrange your libraries in your solution? Today, we'll talk about how to break your project into reusable components to make it extendable for future projects using an onion architecture.\"",
					"tags": [
						"onion",
						"architecture",
						"danylko"
					]
				}
			]
		},
		{
			"id": 31,
			"name": "",
			"about": "",
			"links": [
				{
					"name": "Wikipedia",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 32,
			"name": "Social Media 🧠",
			"about": "Some of the best places I've known in the internet for .NET developers.",
			"links": [
				{
					"name": "C# Discord",
					"url": "https://discord.gg/csharp",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "ASP.NET Core en Español",
					"url": "https://www.facebook.com/groups/291405831518163",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 33,
			"name": "Job Search",
			"about": "Places where to look up for a job.",
			"links": [
				{
					"name": "arc.dev",
					"url": "https://arc.dev/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "amazonuniversity.jobs",
					"url": "https://www.amazonuniversity.jobs/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "UpWork",
					"url": "https://www.upwork.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Fiverr",
					"url": "https://www.fiverr.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "FlexJobs",
					"url": "https://www.flexjobs.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Freelancer Dot Net Developer",
					"url": "https://www.facebook.com/groups/185064098523465",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Talently",
					"url": "https://everest.talently.tech/register/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "lemon.io",
					"url": "https://lemon.io/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 34,
			"name": "Online Tools",
			"about": "Online tools, applications or whatever you may find handy when developing your applications.",
			"links": [
				{
					"name": "10015 Tools",
					"url": "https://10015.io/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Thought Works Technology Radar",
					"url": "https://www.thoughtworks.com/radar",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "overapi.com (cheatsheets)",
					"url": "https://overapi.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "mockAPI",
					"url": "https://mockapi.io/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Desmos Online Graphic Calculator",
					"url": "https://www.desmos.com/calculator",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Desmos Scientific Calculator",
					"url": "https://www.desmos.com/scientific",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 35,
			"name": "Entity Framework (EF6, EF Core)",
			"about": "Entity Framework is an open-source ORM framework for .NET applications supported by Microsoft. It enables developers to work with data using objects of domain specific classes without focusing on the underlying database tables and columns where this data is stored. With the Entity Framework, developers can work at a higher level of abstraction when they deal with data, and can create and maintain data-oriented applications with less code compared with traditional applications. ",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Entity_Framework",
					"description": "Entity Framework (EF) is an open source object–relational mapping (ORM) framework for ADO.NET. It was originally shipped as an integral part of .NET Framework. Starting with Entity Framework version 6, it has been delivered separately from the .NET Framework.",
					"tags": [
						"ef",
						"orm"
					]
				},
				{
					"name": "Official Docs",
					"url": "https://docs.microsoft.com/en-us/ef/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "EF Basics",
					"url": "https://www.entityframeworktutorial.net/what-is-entityframework.aspx",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "entityframework.net",
					"url": "https://entityframework.net/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "DbContext (session to DB)",
					"url": "https://www.entityframeworktutorial.net/basics/context-class-in-entity-framework.aspx",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Tutorials Point (for beginners)",
					"url": "https://www.tutorialspoint.com/entity_framework/index.htm",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "EF Good Practices (SO)",
					"url": "https://stackoverflow.com/a/19312851/7389293",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "TransactionScope and Transactions (SO)",
					"url": "https://stackoverflow.com/questions/2701934/transactionscope-and-transactions",
					"description": "It looks like TransactionScope object Rolls back before the SqlTransaction? Is that possible and if so what is the correct methodology for wrapping a TransactionScope in a transaction.",
					"tags": [
						"transactions",
						"scope",
						"roll back"
					]
				},
				{
					"name": "TransactionScope Class (MS)",
					"url": "https://learn.microsoft.com/en-us/dotnet/api/system.transactions.transactionscope?view=net-6.0",
					"description": "Makes a code block transactional. This class cannot be inherited. The System.Transactions infrastructure provides both an explicit programming model based on the Transaction class, as well as an implicit programming model using the TransactionScope class, in which transactions are automatically managed by the infrastructure.",
					"tags": [
						"transactions"
					]
				}
			]
		},
		{
			"id": 36,
			"name": "Object–Relational Mapping (ORM)",
			"about": "Object-relational mapping (ORM) is a programming technique in which a metadata descriptor is used to connect object code to a relational database. Object code is written in object-oriented programming (OOP) languages such as Java or C#. ORM converts data between type systems that are unable to coexist within relational databases and OOP languages.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "What's this?",
					"url": "https://education.launchcode.org/csharp-web-development/chapters/orm-intro/background.html",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "NHibernate",
					"url": "https://nhibernate.info/",
					"description": "",
					"tags": [
						"orm"
					]
				}
			]
		},
		{
			"id": 37,
			"name": "Domain-Driven Design (DDD)",
			"about": "It is a software development approach that uses and builds upon OOAD (Object-Oriented Analysis and Design) principles and ideas. Domain-driven design (DDD) is a major software design approach, focusing on modelling software to match a domain according to input from that domain's experts. Under domain-driven design, the structure and language of software code (class names, class methods, class variables) should match the business domain. For example, if a software processes loan applications, it might have classes like LoanApplication and Customer, and methods such as AcceptOffer and Withdraw.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Domain-driven_design",
					"description": "",
					"tags": [
						"ddd"
					]
				},
				{
					"name": "Aprende DDD en 20 minutos ⚡ | Domain-Driven Design (SPA)",
					"url": "https://youtu.be/dH5aSQLXtKg",
					"description": "Resumen de Domain Driven Design tanto de la parte táctica como estratégica.",
					"tags": [
						"ddd",
						"video",
						"español",
						"spanish"
					]
				},
				{
					"name": "An Introduction to Domain Driven Design",
					"url": "https://www.methodsandtools.com/archive/archive.php?id=97",
					"description": "Today's enterprise applications are undoubtedly sophisticated and rely on some specialized technologies (persistence, AJAX, web services and so on) to do what they do. And as developers it's understandable that we tend to focus on these technical details. But the truth is that a system that doesn't solve the business needs is of no use to anyone, no matter how pretty it looks or how well architected its infrastructure.",
					"tags": [
						"ddd",
						"introduction"
					]
				},
				{
					"name": "(a) \"Domain\"",
					"url": "https://en.wikipedia.org/wiki/Domain_(software_engineering)",
					"description": "Also known as \"problem domain\".",
					"tags": [
						"ddd",
						"wikipedia",
						"definition"
					]
				},
				{
					"name": "(b) \"Business Domain\"",
					"url": "https://en.wikipedia.org/wiki/Business_domain",
					"description": "Set of classes that represent objects in the business model being implemented. The business domain is distinguishable from the business model in that the business model is an understanding and explanation of information and behaviors in the problem domain, while the business domain is an implementation of that business model in a specific programming language.",
					"tags": [
						"ddd",
						"domain",
						"business"
					]
				},
				{
					"name": "(c) \"Business Model\"",
					"url": "https://en.wikipedia.org/wiki/Business_model",
					"description": "A business model describes how an organization creates, delivers, and captures value, in economic, social, cultural or other contexts. The process of business model construction and modification is also called \"business model innovation\" and forms a part of business strategy.",
					"tags": [
						"ddd",
						"business"
					]
				},
				{
					"name": "Vladimir Khorikov: DDD in a nutshell",
					"url": "https://www.youtube.com/watch?v=kPV1SkdSnhE&ab_channel=CentricRO",
					"description": "Takeaways: the main principles of DDD and why DDD is important in business applications, technical aspects and patterns in DDD, including the difference between anemic and rich domain models, the relation between DDD, microservices and Cloud.",
					"tags": [
						"ddd",
						"video",
						"pelado",
						"vladimir",
						"youtube"
					]
				},
				{
					"name": "Free Course on DDD, PluralSight",
					"url": "https://www.pluralsight.com/courses/domain-driven-design-in-practice",
					"description": "A descriptive, in-depth walk-through for applying Domain-Driven Design principles in practice.",
					"tags": [
						"course"
					]
				},
				{
					"name": "Services in Domain-Driven Design (DDD), Lev Gorodinski",
					"url": "http://gorodinski.com/blog/2012/04/14/services-in-domain-driven-design-ddd/",
					"description": "\"The term service is overloaded and its meaning takes on different shades depending on the context. As a result, there is a cloud of confusion surrounding the notion of services as one tries to distinguish between application services, domain services, infrastructural services, SOA services, etc. In all these cases the term “service” is valid, however the roles are different and can span all layers of an application.\"",
					"tags": [
						"services",
						"ddd"
					]
				}
			]
		},
		{
			"id": 38,
			"name": "NuGet Dependencies",
			"about": "NuGet is a mechanism through which developers can create, share, and consume useful.NET libraries and packages.",
			"links": [
				{
					"name": "T4MVC",
					"url": "https://github.com/T4MVC/T4MVC",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "AutoMapper",
					"url": "http://automapper.org/",
					"description": "",
					"tags": [
						"mapper",
						"dto"
					]
				},
				{
					"name": "C# Bogus",
					"url": "https://github.com/bchavez/Bogus",
					"description": "",
					"tags": [
						"form",
						"content",
						""
					]
				},
				{
					"name": "RabbitMQ",
					"url": "https://betterprogramming.pub/why-do-we-need-rabbitmq-f9f1d99c074c",
					"description": "",
					"tags": [
						"message",
						"broker",
						""
					]
				},
				{
					"name": "NLog",
					"url": "https://nlog-project.org/",
					"description": "",
					"tags": [
						"logging",
						"",
						""
					]
				},
				{
					"name": "Naked Objects for .NET",
					"url": "https://en.wikipedia.org/wiki/Naked_Objects_for_.NET",
					"description": "Naked Objects Group simplifies the development of business applications, by eliminating the need to write multiple layers of code.",
					"tags": [
						"reflection",
						"mvc"
					]
				}
			]
		},
		{
			"id": 39,
			"name": "GitHub Pages",
			"about": "It is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository on GitHub, optionally runs the files through a build process, and publishes a website.",
			"links": [
				{
					"name": "Use own DB on GHP",
					"url": "https://stackoverflow.com/questions/31655085/database-on-a-personal-github-page",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Link to html in another repo",
					"url": "https://stackoverflow.com/questions/62601696/github-page-link-to-html-in-another-repo",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 40,
			"name": "Hosting Services",
			"about": "A web hosting service is a type of Internet hosting service that hosts websites for clients, i.e. it offers the facilities required for them to create and maintain a site and makes it accessible on the World Wide Web. Companies providing web hosting services are sometimes called web hosts.",
			"links": [
				{
					"name": "Web Hosting Service",
					"url": "https://en.wikipedia.org/wiki/Web_hosting_service",
					"description": "A web hosting service is a type of Internet hosting service that hosts websites for clients.",
					"tags": [
						"wikipedia"
					]
				},
				{
					"name": "Azure",
					"url": "https://azure.microsoft.com/en-us/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "AWS",
					"url": "https://aws.amazon.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "somee.com",
					"url": "https://somee.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "myasp.net",
					"url": "https://www.myasp.net/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "smarterasp.net",
					"url": "https://www.smarterasp.net",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "ionos.com/",
					"url": "https://www.ionos.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "contabo.com",
					"url": "https://contabo.com/en/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "sitioshispanos.com",
					"url": "https://www.sitioshispanos.com/es/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "asphostportal.com",
					"url": "https://www.asphostportal.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "PlanetScale",
					"url": "https://planetscale.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Firebase",
					"url": "https://firebase.google.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Vercel",
					"url": "https://vercel.com/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 41,
			"name": "OOP",
			"about": "Object-oriented programming (OOP) is a style of programming characterized by the identification of classes of objects closely linked with the methods (functions) with which they are associated. It also includes ideas of inheritance of attributes and methods.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Object-oriented_programming",
					"description": "Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which can contain data and code: data in the form of fields (often known as attributes or properties), and code, in the form of procedures (often known as methods).",
					"tags": [
						""
					]
				},
				{
					"name": "4 Principles of Object-Oriented Programming",
					"url": "https://khalilstemmler.com/articles/object-oriented/programming/4-principles/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 42,
			"name": "🤓",
			"about": "Non-topical stuffs.",
			"links": [
				{
					"name": "List of topics",
					"url": "./assets/broken.png",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "musicForProgramming();",
					"url": "https://musicforprogramming.net/fiftyseven",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "InfoQ - Software Development News, Trends and Best Practices",
					"url": "https://www.infoq.com/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 43,
			"name": "LINQ",
			"about": "Language-Integrated Query (LINQ) is the name for a set of technologies based on the integration of query capabilities directly into the C# language. Traditionally, queries against data are expressed as simple strings without type checking at compile time or IntelliSense support. With LINQ, a query is a first-class language construct, just like classes, methods, events. You write queries against strongly typed collections of objects by using language keywords and familiar operators. The LINQ family of technologies provides a consistent query experience for objects (LINQ to Objects), relational databases (LINQ to SQL), and XML (LINQ to XML).",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Language_Integrated_Query",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Official Docs",
					"url": "https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "codingame.com free course",
					"url": "https://www.codingame.com/playgrounds/213/using-c-linq---a-practical-overview/welcome",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Using IQueryable with Linq",
					"url": "https://stackoverflow.com/questions/1578778/using-iqueryable-with-linq/1578809#1578809",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 44,
			"name": "YouTube 📺",
			"about": "Best channels I've found so far about .NET technologies and programming learning. Videos marked as SPA are in Spanish.",
			"links": [
				{
					"name": "freeCodeCamp.org",
					"url": "https://www.youtube.com/c/Freecodecamp/videos",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "dotNET",
					"url": "https://www.youtube.com/c/dotNET/videos",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Coder Foundry",
					"url": "https://www.youtube.com/c/CoderFoundryBootcamp/videos",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Code Skills",
					"url": "https://www.youtube.com/c/jestradabe/videos",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": ".NET Interview Preparation videos",
					"url": "https://www.youtube.com/c/dnfvideo/videos",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Mark Richards, on Software Architecture",
					"url": "https://www.youtube.com/channel/UC-Z7T0lAq_xECevIz8E5R5w",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "hdeleonnet (Back-End; SPA)",
					"url": "https://www.youtube.com/c/hdeleonnet",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "BettaTech (SPA)",
					"url": "https://www.youtube.com/c/BettaTech",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "EDteam (SPA)",
					"url": "https://www.youtube.com/c/EDteam",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 45,
			"name": ".NET Frameworks",
			"about": "NET Frameworks are frameworks that are built on top of the one .NET framework.",
			"links": [
				{
					"name": "abp.io",
					"url": "https://abp.io/",
					"description": "ABP Framework offers an opinionated architecture to build enterprise software solutions with best practices on top of the .NET and the ASP.NET Core platforms. It provides the fundamental infrastructure, production-ready startup templates, modules, themes, tooling, guides and documentation to implement that architecture properly and automate the details and repetitive works as much as possible.",
					"tags": [
						"framework"
					]
				},
				{
					"name": "syncfusion.com (inspiration)",
					"url": "https://ej2.syncfusion.com/home/aspnetmvc.html",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 46,
			"name": "General Software Architecture",
			"about": "Software architecture refers to the fundamental structures of a software system and the discipline of creating such structures and systems. Each structure comprises software elements, relations among them, and properties of both elements and relations.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Software_architecture",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Chapter 3: Architectural Patterns and Styles",
					"url": "https://learn.microsoft.com/en-us/previous-versions/msp-n-p/ee658117(v=pandp.10)?redirectedfrom=MSDN#DomainModelStyle",
					"description": "This chapter describes and discusses high level patterns and principles commonly used for applications today. These are often referred to as the architectural styles.",
					"tags": [
						"microsoft",
						"architectural style",
						"design"
					]
				},
				{
					"name": "Software Architecture Monday, with Mark Richards",
					"url": "https://youtu.be/FKYKeqWfyIs",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Multitier Architecture (Wiki)",
					"url": "https://en.wikipedia.org/wiki/Multitier_architecture",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Onion Architecture (Jeffrey Palermo)",
					"url": "https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Jamstack.org",
					"url": "https://jamstack.org/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Martin Fowler",
					"url": "https://martinfowler.com/architecture/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 47,
			"name": "ADO.NET",
			"about": "ADO.NET is the data access component for the . NET Framework. ADO.NET leverages the power of XML to provide disconnected access to data. ADO.NET is made of a set of classes that are used for connecting to a database, providing access to relational data, XML, and application data, and retrieving results.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/ADO.NET",
					"description": "ADO.NET is a data access technology from the Microsoft .NET Framework that provides communication between relational and non-relational systems through a common set of components. ADO.NET is a set of computer software components that programmers can use to access data and data services from a database. It is a part of the base class library that is included with the Microsoft .NET Framework. It is commonly used by programmers to access and modify data stored in relational database systems, though it can also access data in non-relational data sources. ADO.NET is sometimes considered an evolution of ActiveX Data Objects (ADO) technology, but was changed so extensively that it can be considered an entirely new product. ",
					"tags": [
						"ado.net",
						"wikipedia"
					]
				},
				{
					"name": "MS Docs",
					"url": "https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Entity Framework VS ADO.NET",
					"url": "https://stackoverflow.com/questions/22328889/entity-framework-vs-pure-ado-net",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 48,
			"name": "Cleaner Code Examples",
			"about": "When we talk about clean code, we talk about a reader-focused development style that produces software that's easy to write, read, and maintain. Clean code is code that is easy to understand and easy to change. The word “clean” has become very trendy nowadays if you look at design, photography, etc",
			"links": [
				{
					"name": "if() return",
					"url": "https://www.youtube.com/shorts/JnFh2NoAM4s",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 49,
			"name": "Workflow Tools",
			"about": "Workflow is the series of activities that are necessary to complete a task. Each step in a workflow has a specific step before it and a specific step after it, with the exception of the first and last steps. In a linear workflow, an outside event usually initiates the first step.",
			"links": [
				{
					"name": "Asana",
					"url": "https://app.asana.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "notion.so",
					"url": "https://www.notion.so",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "boostnote.io",
					"url": "https://boostnote.io/gdm",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 50,
			"name": "JSON",
			"about": "It is a text-based way of representing JavaScript object literals, arrays, and scalar data. JSON is relatively easy to read and write, while also easy for software to parse and generate. It is often used for serializing structured data and exchanging it over a network, typically between a server and web applications.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/JSON",
					"description": "JSON (JavaScript Object Notation),  is an open standard file format and data interchange format that uses human-readable text to store and transmit data objects consisting of attribute–value pairs and arrays (or other serializable values). It is a common data format with diverse uses in electronic data interchange, including that of web applications with servers. JSON is a language-independent data format. It was derived from JavaScript, but many modern programming languages include code to generate and parse JSON-format data. JSON filenames use the extension .json. ",
					"tags": [
						"json",
						"wikipedia"
					]
				},
				{
					"name": "tutorialspoint.com",
					"url": "https://www.tutorialspoint.com/json/json_quick_guide.htm",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "11 Ways to Improve JSON Performance & Usage",
					"url": "https://stackify.com/top-11-json-performance-usage-tips/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "JSON Google Style Guide",
					"url": "https://google.github.io/styleguide/jsoncstyleguide.xml",
					"description": "",
					"tags": [
						"style guide"
					]
				}
			]
		},
		{
			"id": 51,
			"name": "Packages",
			"about": "Packages for: npm, NuGet",
			"links": [
				{
					"name": "openbase.com (npm)",
					"url": "https://openbase.com/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 52,
			"name": "HTML Template Engines",
			"about": "Template Engines are tools that help us break HTML code into smaller pieces that we can reuse across multiple HTML files. They also give you the power to feed data into variables that help you simplify your code.",
			"links": [
				{
					"name": "Top 10",
					"url": "https://openbase.com/categories/js/most-popular-javascript-html-templating-engine-libraries",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "How to Modularize HTML Using Template Engines and Gulp",
					"url": "https://zellwk.com/blog/nunjucks-with-gulp/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Nunjucks",
					"url": "https://mozilla.github.io/nunjucks/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Pug",
					"url": "https://github.com/pugjs/pug",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 53,
			"name": "Docker",
			"about": "Docker is an open source containerization platform. It enables developers to package applications into containers—standardized executable components combining application source code with the operating system (OS) libraries and dependencies required to run that code in any environment.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Docker_(software)",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Docker For Beginners",
					"url": "https://www.freecodecamp.org/news/docker-simplified-96639a35ff36/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Docker Docs",
					"url": "https://docs.docker.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Docker, what is it and what is the purpose",
					"url": "https://stackoverflow.com/a/42111368/7389293",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 54,
			"name": "DanylkoWeb Topics 🔥",
			"about": "A technology blog focusing on mobile, responsive, and web technologies primarily in the Microsoft stack.",
			"links": [
				{
					"name": "ASP.NET MVC Best Practices and Guidelines",
					"url": "https://www.danylkoweb.com/Blog/aspnet-mvc-best-practices-and-guidelines-Q4",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 55,
			"name": "Well-being ❤️‍🩹",
			"about": "Well-being, or wellbeing, also known as wellness, prudential value or quality of life, refers to what is intrinsically valuable relative to someone. So the well-being of a person is what is ultimately good for this person, what is in the self-interest of this person. IN SHORT: The state of being comfortable, healthy, or happy.",
			"links": [
				{
					"name": "Healthy Software Developer (YT)",
					"url": "https://www.youtube.com/c/JaymeEdwardsMedia",
					"description": "\"After over 35 projects for some of the most prestigious companies, I burned out. Learn from my mistakes and insights! After a 25 year career as a software architect and management consultant, I now work part time in the mornings. And in the afternoon I'm coaching programmers and other IT professionals to be mentally healthy when they deliver software!\" - Jayme Edwards",
					"tags": [
						"youtube",
						"health",
						"job",
						"happiness"
					]
				}
			]
		},
		{
			"id": 56,
			"name": "Ajax",
			"about": "Ajax (\"Asynchronous JavaScript and XML/JSON\") is a set of web development techniques that uses various web technologies on the client-side to create asynchronous web applications. Ajax is not a technology, but rather a programming concept and technology use.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Ajax_(programming)",
					"description": "Ajax, short for Asynchronous JavaScript and XML, is a set of web development techniques that uses various web technologies on the client-side to create asynchronous web applications. With Ajax, web applications can send and retrieve data from a server asynchronously (in the background) without interfering with the display and behaviour of the existing page.",
					"tags": [
						"wikipedia",
						"ajax"
					]
				},
				{
					"name": "24 Best Practices for AJAX Implementations",
					"url": "https://code.tutsplus.com/tutorials/24-best-practices-for-ajax-implementations--net-9180",
					"description": "Implementing AJAX technology can be a hit or miss thing. Do it well and you'll have users raving over the slickness it provides to the general user experience, while, if you mess it up, you'll be at the receiving end of their wrath.",
					"tags": [
						"ajax",
						"best practices"
					]
				},
				{
					"name": "success: Vs .done",
					"url": "https://stackoverflow.com/questions/8840257/jquery-ajax-handling-continue-responses-success-vs-done",
					"description": "'success' has been the traditional name of the success callback in jQuery, defined as an option in the ajax call. However, since the implementation of '$.Deferred' and more sophisticated callbacks, 'done' is the preferred way to implement success callbacks, as it can be called on any deferred.",
					"tags": [
						"done",
						"ajax",
						"callback"
					]
				}
			]
		},
		{
			"id": 57,
			"name": "Git",
			"about": "Git is free and open source software for distributed version control: tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Git",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Git Docs",
					"url": "https://git-scm.com/doc",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Common Git Commands",
					"url": "http://guides.beanstalkapp.com/version-control/common-git-commands.html",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Git Workflow",
					"url": "https://wiki.spheredev.org/index.php/Git_for_the_lazy#Introduce_yourself_to_git",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "git - the simple guide",
					"url": "http://up1.github.io/git-guide/index.html",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "learngitbranching.js.org",
					"url": "https://learngitbranching.js.org/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "gitexercises.fracz.com",
					"url": "https://gitexercises.fracz.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "gitimmersion.com",
					"url": "https://gitimmersion.com/lab_01.html",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "visual-git-guide",
					"url": "https://marklodato.github.io/visual-git-guide/index-en.html",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 58,
			"name": "UI (User Interface)",
			"about": "The means by which the user and a computer system interact, in particular the use of input devices and software. Anything related to actual user interface goes here.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/User_interface",
					"description": "In the industrial design field of human–computer interaction, a user interface is the space where interactions between humans and machines occur.",
					"tags": [
						"wikipedia",
						"ui"
					]
				},
				{
					"name": "Toast Notifications",
					"url": "https://codewithmukesh.com/blog/toast-notifications-in-aspnet-core/",
					"description": "",
					"tags": [
						"toast",
						"notifications"
					]
				}
			]
		},
		{
			"id": 59,
			"name": "Nomad Work",
			"about": "What Is a Digital Nomad/Working? Digital nomads are people who are location-independent and use technology to perform their job, living a nomadic lifestyle. Digital nomads work remotely, telecommuting rather than being physically present at a company's headquarters or office.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Digital_nomad",
					"description": "Digital nomads are people who live in a nomadic way while working remotely using technology and the internet. Such people generally have minimal material possessions and work remotely in temporary housing, hotels, cafes, public libraries, co-working spaces, or recreational vehicles, using Wi-Fi, smartphones or mobile hotspots to access the Internet. Some digital nomads are perpetual travelers, while others are only nomadic for a short period of time. While some nomads travel through various countries, others focus on one area. Some may engage in van-dwelling. In 2020, a research study found that 10.9 million American workers described themselves as digital nomads, an increase of 49% from 2019.",
					"tags": [
						"wikipedia",
						"work",
						"job"
					]
				},
				{
					"name": "The Ultimate Digital Nomad Guide",
					"url": "https://www.outsite.co/digital-nomad-guide",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Reddit",
					"url": "https://www.reddit.com/r/digitalnomad/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "OUTSITE",
					"url": "https://www.outsite.co/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 60,
			"name": "Blogs",
			"about": "A blog (a truncation of \"weblog\") is a discussion or informational website published on the World Wide Web consisting of discrete, often informal diary-style text entries (posts).",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Blog",
					"description": "",
					"tags": [
						"wikipedia"
					]
				},
				{
					"name": "Stackoverflow Blog",
					"url": "https://stackoverflow.blog",
					"description": "Programming realted good stuffs, understandable, professional and not verbose.",
					"tags": [
						"blog",
						"stackoverflow",
						"top"
					]
				},
				{
					"name": "danylkoweb.com",
					"url": "https://www.danylkoweb.com",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "codejourney.net",
					"url": "https://www.codejourney.net/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "shhdharmen.me",
					"url": "https://blog.shhdharmen.me/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "meziantou.net",
					"url": "https://www.meziantou.net/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 61,
			"name": "JS Frameworks",
			"about": "A JavaScript framework is a collection of JavaScript code libraries that provide a web developer with pre-written code for routine programming tasks. Frameworks are structures with a particular context and help you create web applications within that context.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Comparison_of_JavaScript-based_web_frameworks",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "What's",
					"url": "https://generalassemb.ly/blog/what-is-a-javascript-framework/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Angular",
					"url": "https://angular.io/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "ReactJS",
					"url": "https://reactjs.org/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Vue.js",
					"url": "https://vuejs.org/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Alpine",
					"url": "https://alpinejs.dev/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 62,
			"name": "Blazor",
			"about": "Blazor is a free and open-source web framework that enables developers to create web apps using C# and HTML. There are five announced versions of it announced, one of them using web assembly.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Blazor",
					"description": "Blazor is a free and open-source web framework that enables developers to create web apps using C# and HTML. It is being developed by Microsoft.",
					"tags": [
						"blazor",
						"wikipedia"
					]
				},
				{
					"name": "What’s behind the hype about Blazor?",
					"url": "https://stackoverflow.blog/2020/02/26/whats-behind-the-hype-about-blazor/",
					"description": "Blazor is a new client-side UI framework from the ASP.NET team. Its big selling point is the ability to write rich web UI experiences using HTML, CSS, and C# instead of JavaScript—something a lot of developers have been dreaming of.",
					"tags": [
						"blazor",
						"ui",
						"blog",
						"stackoverflow"
					]
				},
				{
					"name": "How to deploy ASP.NET Blazor WebAssembly to GitHub",
					"url": "https://swimburger.net/blog/dotnet/how-to-deploy-aspnet-blazor-webassembly-to-github-pages",
					"description": "With ASP.NET Blazor WebAssembly (WASM) you can create .NET web applications that run completely inside of the browser sandbox. The publish output of a Blazor WASM project are all static files. Now that you can run .NET web applications without server-side code, you can deploy these applications to various static site hosts, such as Azure Static Web Apps and GitHub Pages.",
					"tags": [
						"blazor",
						"github"
					]
				}
			]
		},
		{
			"id": 63,
			"name": "Static Site Generator",
			"about": "A static site generator is a tool that generates a full static HTML website based on raw data and a set of templates. Essentially, a static site generator automates the task of coding individual HTML pages and gets those pages ready to serve to users ahead of time.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "/assets/wikipedia-no.jpg",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "What's",
					"url": "https://kinsta.com/blog/static-site-generator/#5-best-static-site-generators",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Jekyll",
					"url": "https://jekyllrb.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "HUGO",
					"url": "https://gohugo.io",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "11ty (JS, NodeJS)",
					"url": "https://www.11ty.dev/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Gatsbyjs (from ReactJS)",
					"url": "https://www.gatsbyjs.com",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Gridsome",
					"url": "https://gridsome.org/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 64,
			"name": "Authentication/Authorization",
			"about": "Service and a procedure that enables members of different institutions to access protected information that is distributed on different web servers.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Authentication_and_authorization_infrastructure",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "auth0",
					"url": "https://auth0.com/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 65,
			"name": "C# Exception Handling",
			"about": "Process of responding to the occurrence of exceptions (anomalous or exceptional conditions requiring special processing) during the execution of a program. In general, an exception breaks the normal flow of execution and executes a pre-registered exception handler. The details of how this is done depend on whether it is a hardware or software exception. Some exceptions, especially hardware ones, may be handled so gracefully that execution can resume where it was interrupted.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Exception_handling",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "throw keyword basic example",
					"url": "https://www.tutorialsteacher.com/csharp/throw-csharp",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 66,
			"name": "App_Start",
			"about": "This entry is for explaining those files and resources initialized at the app start up.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "/assets/wikipedia-no.jpg",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Bundling and Minification",
					"url": "https://docs.microsoft.com/en-us/aspnet/mvc/overview/performance/bundling-and-minification",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Bundling #1",
					"url": "https://www.c-sharpcorner.com/article/bundling-in-asp-net-mvc-application/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Bundling #2",
					"url": "https://www.tutorialsteacher.com/mvc/scriptbundle-mvc",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 67,
			"name": "npm Dependencies",
			"about": "npm is the world's largest Software Registry. The registry contains +800,000 code packages. Open-source developers use npm to share software. Many organizations also use npm to manage private development. Using npm is free to use. You can download all npm public software packages without any registration or logon. npm includes a CLI (Command Line Client) that can be used to download and install software.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Npm_(software)",
					"description": "npm (originally short for Node Package Manager)is a package manager for the JavaScript programming language maintained by npm, Inc. npm is the default package manager for the JavaScript runtime environment Node.js. It consists of a command line client, also called npm, and an online database of public and paid-for private packages, called the npm registry. The registry is accessed via the client, and the available packages can be browsed and searched via the npm website. The package manager and the registry are managed by npm, Inc.",
					"tags": [
						"wikipedia"
					]
				},
				{
					"name": "npmjs (Official site)",
					"url": "https://www.npmjs.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "FakerJS",
					"url": "https://fakerjs.dev/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "axios",
					"url": "https://github.com/axios/axios",
					"about": "Promise based HTTP client for the browser and node.js",
					"tags": [
						"npm",
						"http"
					]
				}
			]
		},
		{
			"id": 68,
			"name": "Collections",
			"about": "It is a grouping of some variable number of data items (possibly zero) that have some shared significance to the problem being solved and need to be operated upon together in some controlled fashion.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Collection_(abstract_data_type)",
					"description": "In computer programming, a collection is a grouping of some variable number of data items (possibly zero) that have some shared significance to the problem being solved and need to be operated upon together in some controlled fashion. Generally, the data items will be of the same type or, in languages supporting inheritance, derived from some common ancestor type. A collection is a concept applicable to abstract data types, and does not prescribe a specific implementation as a concrete data structure, though often there is a conventional choice (see Container for type theory discussion). Examples of collections include lists, sets, multisets, trees and graphs. ",
					"tags": [
						"wikipedia"
					]
				},
				{
					"name": "LinkedIn: IEnumerable vs ICollection vs IList vs IQueryable",
					"url": "https://www.linkedin.com/pulse/ienumerable-vs-icollection-idictionary-ilist-hasan-shahjahan/",
					"description": "Collections in c#, we have been using it interchangeably but do we really know what is it that separates each other.They all have specific characteristics that differentiate them and makes them adaptable to certain scenarios.",
					"tags": [
						"ilist",
						"icollection",
						"ienumerable",
						"interfaces",
						"use"
					]
				},
				{
					"name": "Code Project: IList vs IEnumerable vs IQueryable vs ICollection vs IDictionary",
					"url": "https://www.codeproject.com/Articles/832189/List-vs-IEnumerable-vs-IQueryable-vs-ICollection-v",
					"description": "This article is one of the first sources (with complete and clear comparison) about data structure, Array, ArrayList, List, IList, ICollection, Stack, Queue, HashTable, Dictionary, IQueryable, IEnumerable.",
					"tags": [
						"ilist",
						"icollection",
						"ienumerable",
						"interfaces",
						"use"
					]
				},
				{
					"name": "When to use - IEnumerable vs IList vs ICollection?",
					"url": "https://youtu.be/YYZo1l74JE0",
					"description": "A common interview question with .NET Core is explain the difference between IEnumerable, ICollection and IList? We use them so often that many times we forget the basic difference on which will help optimization in which scenario.",
					"tags": [
						"video",
						"ilist",
						"icollection",
						"ienumerable",
						"interfaces",
						"use"
					]
				}
			]
		},
		{
			"id": 69,
			"name": "Big O notation",
			"about": "Big-O notation is the language we use for talking about how long an algorithm takes to run (time complexity) or how much memory is used by an algorithm (space complexity). Big-O notation can express the best, worst, and average-case running time of an algorithm.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Big_O_notation",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 70,
			"name": "🔙 Back-End Portfolio/Prep 🔚",
			"about": "Software engineering portfolios are sites that display a collection of your professional projects to employers. Portfolios help employers understand your background as a software engineer, so it's beneficial to include your most impressive projects and work experiences.",
			"links": [
				{
					"name": "Choose the Language: C#",
					"url": "https://en.wikipedia.org/wiki/C_Sharp_(programming_language)",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Choose the Framework: .NET",
					"url": "https://en.wikipedia.org/wiki/.NET_Framework_version_history",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "HTTP Protocol",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "HTTP status codes list (Wikipedia)",
					"url": "https://en.wikipedia.org/wiki/List_of_HTTP_status_codes",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "HTTP Response Status Codes (MDN)",
					"url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "HTTP Request Methods (verbs; MDN)",
					"url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "ORM: Entity Framework",
					"url": "https://en.wikipedia.org/wiki/Entity_Framework",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "MS SQL Server/Syntax",
					"url": "https://en.wikipedia.org/wiki/Microsoft_SQL_Server",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "CRUD/Store Procedures",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "DB Design (Constraints, Rules)",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Lazy Loading",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Back-End Security",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "JSON Web Token",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Authentication/Authorization",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Layer Filtering",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Queue Tasks (Tareas en segundo plano)",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Webhooks",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Services: API Rest, SOAP",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Document Generation (Swagger)",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Unit Testing",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Design Patterns: Observer, DI, Mediator, Factory, Builder, Singleton, Facade, Strategy, State",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Basic Front-End",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 71,
			"name": "Web Development Basics",
			"about": "Web development is the work involved in developing a website for the Internet (World Wide Web) or an intranet (a private network). Web development can range from developing a simple single static page of plain text to complex web applications, electronic businesses, and social network services. A more comprehensive list of tasks to which Web development commonly refers, may include Web engineering, Web design, Web content development, client liaison, client-side/server-side scripting, Web server and network security configuration, and e-commerce development. ",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Frontend_and_backend#Back-end_focused",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 72,
			"name": "Back-End Tools",
			"about": "Software tools or scripts designed to assist a programmer with developing software. For example, a compiler is an example of a programming tool.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Programming_tool",
					"description": "A programming tool or software development tool is a computer program that software developers use to create, debug, maintain, or otherwise support other programs and applications. The term usually refers to relatively simple programs, that can be combined to accomplish a task, much as one might use multiple hands to fix a physical object. The most basic tools are a source code editor and a compiler or interpreter, which are used ubiquitously and continuously. Other tools are used more or less depending on the language, development methodology, and individual engineer, often used for a discrete task, like a debugger or profiler. Tools may be discrete programs, executed separately – often from the command line – or may be parts of a single large program, called an integrated development environment (IDE). In many cases, particularly for simpler use, simple ad hoc techniques are used instead of a tool, such as print debugging instead of using a debugger, manual timing (of overall program or section of code) instead of a profiler, or tracking bugs in a text file or spreadsheet instead of a bug tracking system. The distinction between tools and applications is murky. For example, developers use simple databases (such as a file containing a list of important values) all the time as tools.[dubious – discuss] However a full-blown database is usually thought of as an application or software in its own right. For many years, computer-assisted software engineering (CASE) tools were sought after. Successful tools have proven elusive. In one sense, CASE tools emphasized design and architecture support, such as for UML. But the most successful of these tools are IDEs.",
					"tags": [
						"wikipedia",
						"tools"
					]
				},
				{
					"name": "Postman",
					"url": "https://www.postman.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "dbdiagram.io (DB design)",
					"url": "https://dbdiagram.io/home",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "dbml.org (Mark Up Language)",
					"url": "https://www.dbml.org/home/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 73,
			"name": "Typeface",
			"about": "A typeface is the design of lettering that can include variations in size, weight (e.g. bold), slope (e.g. italic), width (e.g. condensed), and so on. Each of these variations of the typeface is a font.",
			"links": [
				{
					"name": "List of monospaced typefaces (Wikipedia)",
					"url": "https://en.wikipedia.org/wiki/List_of_monospaced_typefaces",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "IBM Plex® typeface",
					"url": "https://github.com/IBM/plex/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Cascadia Code (MS)",
					"url": "https://github.com/microsoft/cascadia-code#installation",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 74,
			"name": "unused",
			"about": "",
			"links": [
				{
					"name": "Wikipedia",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 75,
			"name": "UI/UX and Related Topics",
			"about": "UX design refers to the term “user experience design”, while UI stands for “user interface design”. Both elements are crucial to a software product and work closely together.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/User_experience",
					"description": "The user experience (UX) is how a user interacts with and experiences a product, system or service. It includes a person's perceptions of utility, ease of use, and efficiency. Improving user experience is important to most companies, designers, and creators when creating and refining products because negative user experience can diminish the use of the product and, therefore, any desired positive impacts; conversely, designing toward profitability often conflicts with ethical user experience objectives and even causes harm. User experience is subjective. However, the attributes that make up the user experience are objective.",
					"tags": [
						"wikipedia",
						"user experience"
					]
				},
				{
					"name": "UXD (User Experience Design)",
					"url": "https://en.wikipedia.org/wiki/User_experience_design",
					"description": "User experience design (UX design, UXD, UED, or XD) is the process of defining the experience a user would go through when interacting with a digital product or website. Design decisions in UX design are often driven by research, data analysis, and test results rather than aesthetic preferences and opinions. Unlike user interface design, which focuses solely on the design of a computer interface, UX design encompasses all aspects of a user's perceived experience with a product or website, such as its usability, usefulness, desirability, brand perception, and overall performance. UX design is also an element of the customer experience (CX), which encompasses all aspects and stages of a customer's experience and interaction with a company.",
					"tags": [
						"wikipedia",
						"user experience design"
					]
				},
				{
					"name": "UID (User Interface Design)",
					"url": "https://en.wikipedia.org/wiki/User_interface_design",
					"description": "User interface (UI) design or user interface engineering is the design of user interfaces for machines and software, such as computers, home appliances, mobile devices, and other electronic devices, with the focus on maximizing usability and the user experience. In computer or software design, user interface (UI) design primarily focuses on information architecture. It is the process of building interfaces that clearly communicates to the user what's important. UI design refers to graphical user interfaces and other forms of interface design. The goal of user interface design is to make the user's interaction as simple and efficient as possible, in terms of accomplishing user goals (user-centered design).",
					"tags": [
						"wikipedia",
						"user intrface design"
					]
				},
				{
					"name": "58 Form Design & UX Best Practices",
					"url": "https://www.ventureharbour.com/form-design-best-practices/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 76,
			"name": "Data Structures",
			"about": "In computer science, a data structure is a data organization, management, and storage format that is usually chosen for efficient access to data. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data,i.e., it is an algebraic structure about data.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Data_structure",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "MS Docs",
					"url": "https://docs.microsoft.com/en-us/dotnet/standard/collections/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "List of Data Structures (Wikipedia)",
					"url": "https://en.wikipedia.org/wiki/List_of_data_structures",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Fundamental Data Structures and Algorithms in C# 🔥",
					"url": "https://dev.to/adavidoaiei/fundamental-data-structures-and-algorithms-in-c-4ocf",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 77,
			"name": "F#",
			"about": "F# is a functional-first, general purpose, strongly typed, multi-paradigm programming language that encompasses functional, imperative, and object-oriented programming methods. Developed by Microsoft, The F# Software Foundation.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/F_Sharp_(programming_language)",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 78,
			"name": "API, REST, Rest Web APIs & RESTful Web Services",
			"about": "Different APIs explanations around the web.",
			"links": [
				{
					"name": "API (Wikipedia)",
					"url": "https://en.wikipedia.org/wiki/API",
					"description": "An application programming interface (API) is a way for two or more computer programs to communicate with each other. It is a type of software interface, offering a service to other pieces of software. A document or standard that describes how to build or use such a connection or interface is called an API specification. A computer system that meets this standard is said to implement or expose an API. The term API may refer either to the specification or to the implementation. In contrast to a user interface, which connects a computer to a person, an application programming interface connects computers or pieces of software to each other.",
					"tags": [
						"wikipedia",
						"api"
					]
				},
				{
					"name": "REST (Wikipedia)",
					"url": "https://en.wikipedia.org/wiki/Representational_state_transfer",
					"description": "Representational state transfer (REST) is a software architectural style that describes a uniform interface between physically separate components, often across the Internet in a Client-Server architecture. REST defines four interface constraints: Identification of resources, Manipulation of resources, Self-descriptive messages and hypermedia as the engine of application state.",
					"tags": [
						"wikipedia",
						"rest"
					]
				},
				{
					"name": "Web APIs",
					"url": "https://en.wikipedia.org/wiki/Web_API",
					"description": "A web API is an application programming interface for either a web server or a web browser. It is a web development concept, usually limited to a web application's client-side (including any web frameworks being used), and thus usually does not include web server or browser implementation details such as SAPIs or APIs unless publicly accessible by a remote web application.",
					"tags": [
						"wikipedia",
						"web api"
					]
				},
				{
					"name": "Web Service",
					"url": "https://en.wikipedia.org/wiki/Web_service",
					"description": "A web service (WS) is either:\n\t- A service offered by an electronic device to another electronic device, communicating with each other via the Internet, or...\n\t- A server running on a computer device, listening for requests at a particular port over a network, serving web documents (HTML, JSON, XML, images).",
					"tags": [
						"wikipedia",
						"web service"
					]
				},
				{
					"name": "REST API & RESTful Web Services Explained | Web Services Tutorial (YouTube)",
					"url": "https://youtu.be/LooL6_chvN4",
					"description": "What is REST API? REST stands for Representational State Transfer and API stands for Application Programming Interface.\nRepresentational - the resource (image, page, video, profile) is represented by the web server to the client in any format like HTML, Image, JSON, XML etc.\nState - the state of the application (web site) on a client's computer changes as the client clicks from one link to the next. Ask the client clicks on the link, they request additional resources, and the application \"state\" changes.\nTransfer - the transfer of resources from the web server to the client in a \"representational\" state which can be read by the client or implemented in the application program by the programmer. The transfer may also refer to the application state transfer as the client browses a web site.\nAPI - application programming interface provides useful methods/functions which a programmer can implement into his own application in a chosen programming language like PHP. The API makes it easy for programmers to implement. It's important to note that the response we get when sending REST API request will usually be in JSON, XML or other format which makes it easy to implement in the code and it's not meant to be read immediately by a human being.",
					"tags": [
						""
					]
				},
				{
					"name": "REST APIs with .NET and C#",
					"url": "https://dotnet.microsoft.com/en-us/apps/aspnet/apis",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Web API vs REST API Simplified: 4 Critical Differences",
					"url": "https://hevodata.com/learn/web-api-vs-rest-api/#web",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 79,
			"name": "HTTP Protocol",
			"about": "The Hypertext Transfer Protocol is an application protocol for distributed, collaborative, hypermedia information systems that allows users to communicate data on the World Wide Web. It is a client-server protocol: requests are sent by one entity, the user-agent (or a proxy on behalf of it). Most of the time the user-agent is a Web browser, but it can be anything, for example, a robot that crawls the Web to populate and maintain a search engine index.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "The Hypertext Transfer Protocol (HTTP) is an application layer protocol in the Internet protocol suite model for distributed, collaborative, hypermedia information systems. HTTP is the foundation of data communication for the World Wide Web, where hypertext documents include hyperlinks to other resources that the user can easily access, for example by a mouse click or by tapping the screen in a web browser.",
					"description": "https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol",
					"tags": [
						"wikipedia",
						"http"
					]
				},
				{
					"name": "HTTP Request Methods (verbs)",
					"url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "HTTP Status (Mozilla)",
					"url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "List of HTTP status codes (Wikipedia)",
					"url": "https://en.wikipedia.org/wiki/List_of_HTTP_status_codes",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 80,
			"name": "Microservices",
			"about": "Microservices are an architectural and organizational approach to software development where software is composed of small independent services that communicate over well-defined APIs. These services are owned by small, self-contained teams.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Microservices",
					"description": "A microservice architecture – a variant of the SOA structural style – is an architectural pattern that arranges an application as a collection of loosely-coupled, fine-grained services, communicating through lightweight protocols. One of its goals is that teams can develop and deploy their services independently of others. This is achieved by the reduction of several dependencies in the code base, allowing for developers to evolve their services with limited restrictions from users, and for users to be hidden from additional complexity. As a consequence, organizations are able to develop software with fast growth and size, as well as use off-the-shelf services more easily. Communication requirements are reduced. These benefits come at a cost to maintaining the decoupling. Interfaces need to be designed carefully and treated as a public API. One technique that is used is having multiple interfaces on the same service, or multiple versions of the same service, so as to not disrupt existing users of the code.",
					"tags": [
						"wikipedia",
						"microservices"
					]
				},
				{
					"name": "What is a microservice? (SO)",
					"url": "https://stackoverflow.com/questions/46575898/what-is-a-microservice",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 81,
			"name": "C# Advanced",
			"about": "C# is a general-purpose, multi-paradigm programming language. C# encompasses static typing, strong typing, lexically scoped, imperative, declarative, functional, generic, object-oriented (class-based), and component-oriented programming disciplines. The C# programming language was designed by Anders Hejlsberg from Microsoft in 2000 and was later approved as an international standard by Ecma (ECMA-334).",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/C_Sharp_(programming_language)",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Reflection (Docs)",
					"url": "https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/reflection",
					"description": "",
					"tags": [
						"reflection",
						"docs"
					]
				},
				{
					"name": "Reflective programming (Wiki)",
					"url": "https://en.wikipedia.org/wiki/Reflective_programming",
					"description": "In computer science, reflective programming or reflection is the ability of a process to examine, introspect, and modify its own structure and behavior. Reflection helps programmers make generic software libraries to display data, process different formats of data, perform serialization or deserialization of data for communication, or do bundling and unbundling of data for containers or bursts of communication. Effective use of reflection almost always requires a plan: A design framework, encoding description, object library, a map of a database or entity relations. ",
					"tags": [
						"wikipedia",
						"reflection"
					]
				}
			]
		},
		{
			"id": 82,
			"name": "String Manipulation",
			"about": "",
			"links": [
				{
					"name": "Wikipedia",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Concatenating Strings Efficiently (String Builder)",
					"url": "https://web.archive.org/web/20181106113504/http://yoda.arachsys.com:80/csharp/stringbuilder.html",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 83,
			"name": "SQL Tutorials",
			"about": "Tutorials about agnostic SQL.",
			"links": [
				{
					"name": "sqlauthority.com",
					"url": "https://blog.sqlauthority.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "sqltutorial.org",
					"url": "https://www.sqltutorial.org/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "SQL Server and Azure SQL Labs and Workshops",
					"url": "https://github.com/microsoft/sqlworkshops",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "tt.com/sql",
					"url": "https://www.tutorialsteacher.com/sql",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "tt.com/sqlserver",
					"url": "https://www.tutorialsteacher.com/sqlserver",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "learnsql.com",
					"url": "https://learnsql.com/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "learnsqlonline.org/",
					"url": "https://www.learnsqlonline.org/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "tutorialspoint.com/sql",
					"url": "https://www.tutorialspoint.com/sql/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Normalization (up to 5NF)",
					"url": "https://youtu.be/GFQaEYEc8_8",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 84,
			"name": "ERM (with examples)",
			"about": "An entity–relationship model (or ER model) describes interrelated things of interest in a specific domain of knowledge. A basic ER model is composed of entity types (which classify the things of interest) and specifies relationships that can exist between entities (instances of those entity types). In software engineering, an ER model is commonly formed to represent things a business needs to remember in order to perform business processes. Consequently, the ER model becomes an abstract data model, that defines a data or information structure which can be implemented in a database, typically a relational database.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Entity Relationship (ER) Diagram Model with DBMS Example (Guru99)",
					"url": "https://www.guru99.com/er-diagram-tutorial-dbms.html",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "What is Entity Relationship Diagram (ERD)?",
					"url": "https://www.visual-paradigm.com/guide/data-modeling/what-is-entity-relationship-diagram/",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Entity Relationship Diagram Examples (edrawsoft.com)",
					"url": "https://www.edrawsoft.com/er-diagram-examples.html",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Entity Relationship Modeling Examples (O'Reilly)",
					"url": "https://learning.oreilly.com/library/view/learning-mysql/0596008643/ch04s04.html",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "EDM (Entity Data Model)",
					"url": "https://www.tutorialspoint.com/entity_framework/entity_framework_data_model.htm",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 85,
			"name": "Concept: Business",
			"about": "",
			"links": [
				{
					"name": "Business process (Wikipedia)",
					"url": "https://en.wikipedia.org/wiki/Business_process",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 86,
			"name": "Concept: Domain",
			"about": "",
			"links": [
				{
					"name": "Wikipedia",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 87,
			"name": "Cheetsheets",
			"about": "A cheat sheet or crib sheet is a concise set of notes used for quick reference. Cheat sheets were historically used by students without an instructor or teacher's knowledge to cheat on a test or exam. This collection of cheatsheets here is about programming, meant to help you in your daily tasks as a professional programmer.",
			"links": [
				{
					"name": "Codecademy",
					"url": "https://www.codecademy.com/resources/cheatsheets/all",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 88,
			"name": "Building Forms",
			"about": "How to better build forms. Mainly using Bootstrap and/or any of its super-sets.",
			"links": [
				{
					"name": "Bootstrap Fieldset Legend: How To + Examples + Template",
					"url": "https://azmind.com/bootstrap-fieldset-legend/",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 89,
			"name": "💡",
			"about": "Some core ideas.",
			"links": [
				{
					"name": "Expertise",
					"url": "./docs/my_ideas/expertise.pdf",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 90,
			"name": "Background Tasks",
			"about": "",
			"links": [
				{
					"name": "Wikipedia",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Hosted Services (Queued processes)",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Scheduled Tasks",
					"url": "",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 91,
			"name": "VSCode (Tweaks for .NET development)",
			"about": "",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Visual_Studio_Code",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "scriptcs (C# integration for \"Code Runner\" extension",
					"url": "https://github.com/scriptcs/scriptcs",
					"description": "",
					"tags": [
						""
					]
				}
			]
		},
		{
			"id": 92,
			"name": "Cryptography and .NET",
			"about": "Cryptography, or cryptology is the practice and study of techniques for secure communication in the presence of adversarial behavior. More generally, cryptography is about constructing and analyzing protocols that prevent third parties or the public from reading private messages.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Cryptography",
					"description": "",
					"tags": [
						"wikipedia"
					]
				},
				{
					"name": "Cryptography in .NET",
					"url": "https://www.meziantou.net/cryptography-in-dotnet.htm"
				}
			]
		},
		{
			"id": 93,
			"name": "Service Layer (DDD)",
			"about": "Services on Domain Drive Design.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Service_(systems_architecture)",
					"description": "In the contexts of software architecture, service-orientation and service-oriented architecture, the term service refers to a software functionality or a set of software functionalities (such as the retrieval of specified information or the execution of a set of operations) with a purpose that different clients can reuse for different purposes, together with the policies that should control its usage (based on the identity of the client requesting the service, for example).",
					"tags": [
						"wikipedia",
						"services"
					]
				},
				{
					"name": "Service Layer Architecture",
					"url": "https://stackoverflow.com/questions/14887871/creating-a-service-layer-for-my-mvc-application",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Service Layer Design",
					"url": "https://stackoverflow.com/questions/31180816/mvc-design-pattern-service-layer-purpose",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Service/Business Layer & Repository Providers/Repository Layer",
					"url": "https://stackoverflow.com/questions/20514446/how-to-call-model-methods-in-controller-in-asp-net-mvc",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Persistence Layer",
					"url": "https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design",
					"description": "",
					"tags": [
						""
					]
				},
				{
					"name": "Domain Driven Design: Domain Service, Application Service",
					"url": "https://stackoverflow.com/questions/2268699/domain-driven-design-domain-service-application-service",
					"description": "",
					"tags": [
						"ddd",
						"services"
					]
				},
				{
					"name": "Validating with a Service Layer (C#)",
					"url": "https://learn.microsoft.com/en-us/aspnet/mvc/overview/older-versions-1/models-data/validating-with-a-service-layer-cs",
					"description": "",
					"tags": [
						"services",
						"validation"
					]
				}
			]
		},
		{
			"id": 94,
			"name": "Web Application Architectures",
			"about": "",
			"links": [
				{
					"name": "Google It",
					"url": "https://www.google.com/search?q=web+application+architecture",
					"description": "",
					"tags": [
						"search"
					]
				},
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Web_application",
					"description": "",
					"tags": [
						"wikipedia",
						"web application"
					]
				},
				{
					"name": "What is Web Application Architecture? How It Works, Trends, Best Practices and More",
					"url": "https://stackify.com/web-application-architecture/",
					"description": "",
					"tags": [
						"architecture"
					]
				},
				{
					"name": "Common Web Application Architectures (MS)",
					"url": "https://learn.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/common-web-application-architectures?fbclid=IwAR1PcWjyZAhu82v7n8oM-GDk__yGiBIL1JGDAx5q88ek7IWTy2MKFCEnvZk",
					"description": "",
					"tags": [
						"architecture"
					]
				}
			]
		},
		{
			"id": 95,
			"name": "Work Ethics",
			"about": "Work ethic is a belief that work and diligence have a moral benefit and an inherent ability, virtue or value to strengthen character and individual abilities. It is a set of values centered on importance of work and manifested by determination or desire to work hard. Social ingrainment of this value is considered to enhance character through hard work that is respective to an individual's field of work.",
			"links": [
				{
					"name": "Wikipedia",
					"url": "https://en.wikipedia.org/wiki/Work_ethic",
					"description": "Wikipedia article.",
					"tags": [
						"wikipedia",
						"ethics"
					]
				},
				{
					"name": "Revisando The clean coder, vale la pena leerlo? (SPA)",
					"url": "https://youtu.be/IxbhAsDDbmI",
					"description": "Review del libro The Clean Coder de Robert Martin, este es la continuación del libro Clean Code y habla sobre un código de conducta, cumple lo que promete?, te hará un mejor desarrollador? la respuesta en este video.",
					"tags": [
						"holamundo",
						"martin",
						"robert",
						"clean coder",
						"book"
					]
				},
				{
					"name": "Healthy Software Developer",
					"url": "https://www.youtube.com/c/JaymeEdwardsMedia",
					"description": "\"After over 35 projects for some of the most prestigious companies, I burned out. Learn from my mistakes and insights! After a 25 year career as a software architect and management consultant, I now work part time in the mornings. And in the afternoon I'm coaching programmers and other IT professionals to be mentally healthy when they deliver software!\" - Jayme Edwards",
					"tags": [
						"youtube",
						"ethics",
						"work",
						"health"
					]
				}
			]
		},
		{
			"id": 96,
			"name": "🏗️ Project Building (How To)",
			"about": "",
			"links": [
				{
					"name": "Wikipedia",
					"url": "#",
					"description": "Wikipedia article.",
					"tags": [
						"wikipedia"
					]
				},
				{
					"name": "The Ultimate Visual Studio Solution Structure (S0)",
					"url": "https://stackoverflow.com/questions/3516313/the-ultimate-visual-studio-solution-structure",
					"description": "Some examples of project structure.",
					"tags": [
						"project",
						"structure",
						"examples"
					]
				},
				{
					"name": "Where can I find samples of full ASP.NET MVC projects?",
					"url": "https://www.danylkoweb.com/Blog/where-can-i-find-sample-aspnet-mvc-projects-HL",
					"description": "\"This is one question I'm constantly asked by developers new to MVC. In this post, I show some sites with sample projects so you can build by example.\" - Johnatan Danylko",
					"tags": [
						"project",
						"template",
						"boilerplate"
					]
				},
				{
					"name": "Entity Framework - Insert Update Delete View data in SQL Server using Three Tier",
					"url": "https://youtu.be/Ncbr5axCabM",
					"description": "\"Creating Three Tier Architecture using Entity Framework database first in C#. The C# Basics beginner course is a free C# Tutorial Series that helps beginning programmers learn the basics of the C# Programming Language. This is the best way to Learn C# for beginners.\"",
					"tags": [
						"entity framework",
						"3 tier",
						"layer"
					]
				},
				{
					"name": "Entity Framework Database First Separate Entity Layer From Data Layer",
					"url": "https://youtu.be/kymH_wHiSSw",
					"description": "Separate the entity layer from data layer for Entity Framework Database First approach",
					"tags": [
						"entity framework",
						"3 tier",
						"layer"
					]
				},
				{
					"name": "Architecture Guide: ASP.NET MVC Framework + N-tier + Entity Framework and Many More",
					"url": "https://www.codeproject.com/Articles/70061/Architecture-Guide-ASP-NET-MVC-Framework-N-tier-En",
					"description": "\"If you want to use ASP.NET MVC framework but is struggling to get things arrange to confidently use for your next business project. This Article is just for you. The article guide you to use ASP.NET MVC framework to architect a small Document Management System.\"",
					"tags": [
						"project",
						"mvc",
						"n-tier",
						"entity framework"
					]
				}
			]
		},
		{
			"id": 97,
			"name": "🏗️ Project Examples",
			"about": "This section is for storing useful links for project examples, templates, business generic types, or business specific types.",
			"links": [
				{
					"name": "Project Examples at GitHub",
					"url": "https://github.com/search?l=C%23&q=Generic&type=Repositories",
					"description": "Useful generic repositories, at GitHub.",
					"tags": [
						"project",
						"repositories",
						"help"
					]
				}
			]
		}
	]
}